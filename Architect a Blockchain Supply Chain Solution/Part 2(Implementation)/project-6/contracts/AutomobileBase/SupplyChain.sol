pragma solidity ^0.4.26;

import "../AutomobileCore/Ownable.sol";
import "../AutomobileAccessControl/SupplierRole.sol";
import "../AutomobileAccessControl/ManufacturerRole.sol";
import "../AutomobileAccessControl/DealerRole.sol";
import "../AutomobileAccessControl/CustomerRole.sol";


// Define a contract 'Supplychain'
contract SupplyChain is Ownable, SupplierRole, ManufacturerRole, DealerRole, CustomerRole{

  // Define 'owner'
  address supplyChainOwner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an AutomobileItem.
  mapping (uint => AutomobileItem) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  {
    SupplyOrdered,       // 0
    SupplyReceived,      // 1
    Assembled,           // 2
    ForSaleToDealer,     // 3
    SoldToDealer,        // 4
    ShippedToDealer,     // 5
    ReceivedByDealer,    // 6
    PurchasedByCustomer   // 7
  }

  State constant defaultState = State.SupplyOrdered;

  // Define a struct 'Item' with the following fields:
  struct AutomobileItem {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Manufacturer, goes on the package, can be verified by the Customer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
    string  originManufacturerName; // Manufacturer Name
    string  originManufacturerInformation;  // Manufacturer Information
    string  originManufacturerLatitude; // Manufacturer Latitude
    string  originManufacturerLongitude;  // Manufacturer Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address dealerID;  // Metamask-Ethereum address of the Dealer
    address supplierID; // Metamask-Ethereum address of the Supplier
    address customerID; // Metamask-Ethereum address of the Customer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event SupplyOrdered(uint upc);
  event SupplyReceived(uint upc);
  event Assembled(uint upc);
  event ForSaleToDealer(uint upc);
  event SoldToDealer(uint upc);
  event ShippedToDealer(uint upc);
  event ReceivedByDealer(uint upc);
  event PurchasedByCustomer(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == supplyChainOwner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance to customer
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].customerID.transfer(amountToReturn);
  }

  // Define a modifier that checks the price and refunds the remaining balance to dealer
  modifier checkValueTransferBackToDealer(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].dealerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is SupplyOrdered
  modifier supplyOrdered(uint _upc) {
    require(items[_upc].itemState == State.SupplyOrdered);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is SupplyReceived
  modifier supplyReceived(uint _upc) {
  require(items[_upc].itemState == State.SupplyReceived);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Assembled
  modifier assembled(uint _upc) {
  require(items[_upc].itemState == State.Assembled);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSaleToDealer
  modifier forSaleToDealer(uint _upc) {
  require(items[_upc].itemState == State.ForSaleToDealer);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is SoldToDealer
  modifier soldToDealer(uint _upc) {
  require(items[_upc].itemState == State.SoldToDealer);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is ShippedToDealer
  modifier shippedToDealer(uint _upc) {
  require(items[_upc].itemState == State.ShippedToDealer);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ReceivedByDealer
  modifier receivedByDealer(uint _upc) {
  require(items[_upc].itemState == State.ReceivedByDealer, "");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is PurchasedByCustomer
  modifier purchasedByCustomer(uint _upc) {
  require(items[_upc].itemState == State.PurchasedByCustomer, "");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    supplyChainOwner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == supplyChainOwner) {
      selfdestruct(supplyChainOwner);
    }
  }

  // Define a function 'orderSuppliesForItem' that allows a Manufacturer to order supplies for autombile and mark as supplyOrdered
  function orderSuppliesForItem(
    uint _upc,
    address _originSupplierID, 
    address _originManufacturerID, 
    string _originManufacturerName, 
    string _originManufacturerInformation, 
    string _originManufacturerLatitude, 
    string _originManufacturerLongitude, 
    string _productNotes) public onlyManufacturer() onlyOwner()
  {
   // addManufacturer(_originManufacturerID);
  //  addSupplier(_originSupplierID);


    // Add the new item(Automobile e.g. BMW) as part of orderSupplies
    AutomobileItem memory newAutomobileItem;
    newAutomobileItem.upc = _upc;
    newAutomobileItem.sku = sku;
    newAutomobileItem.ownerID = _originManufacturerID;
    newAutomobileItem.originManufacturerID = _originManufacturerID;
    newAutomobileItem.supplierID = _originSupplierID;
    newAutomobileItem.originManufacturerName = _originManufacturerName;
    newAutomobileItem.originManufacturerInformation = _originManufacturerInformation;
    newAutomobileItem.originManufacturerLatitude = _originManufacturerLatitude;
    newAutomobileItem.originManufacturerLongitude = _originManufacturerLongitude;
    newAutomobileItem.itemState = defaultState;
    newAutomobileItem.productNotes = _productNotes;
    newAutomobileItem.productID = upc + sku;
    items[_upc] = newAutomobileItem;
    // Increment sku
    sku = sku + 1;
  
    // Emit the appropriate event
     emit SupplyOrdered(_upc);
  }

  // Define a function 'receiveSuppliesForItem' that allows a Manufacturer to mark an item 'supplyReceived'
  function receiveSuppliesForItem(uint _upc) public 
   
  // Call modifier to check if upc has passed previous supply chain stage
  supplyOrdered(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originManufacturerID)
  {
    items[_upc].itemState = State.SupplyReceived;
    emit SupplyReceived(_upc);
  }

  // Define a function 'assembleAndManufacturedItem' that allows a Manufacturer to mark an item 'Assembled'
  function assembleAndManufacturedItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  supplyReceived(_upc)
  // Call modifier to verify caller of this function
   verifyCaller(items[_upc].originManufacturerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Assembled;
    // Emit the appropriate event
    emit Assembled(_upc);
  }

  // Define a function 'sellItemToDealer' that allows a Manufacturer to mark an item 'forSaleToDealer'
  function sellItemToDealer(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  assembled(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  {
    
    // Update the appropriate fields
    items[_upc].productPrice = _price;
    items[_upc].itemState = State.ForSaleToDealer;
    // Emit the appropriate event
    emit ForSaleToDealer(_upc);
  }

  // Define a function 'buyItembyDealer' that allows the manufacturer to mark an item 'soldToDealer'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItembyDealer(uint _upc, address dealerID) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSaleToDealer(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to Dealer
    checkValueTransferBackToDealer(_upc)
    {
    // Update the appropriate fields - ownerID, DealerID, itemState
    items[_upc].ownerID = items[_upc].originManufacturerID;
    items[_upc].dealerID = dealerID;
    items[_upc].itemState = State.SoldToDealer;
    // Transfer money to Manufacturer
    items[_upc].dealerID.transfer(items[_upc].productPrice);
    // emit the appropriate event
    emit SoldToDealer(_upc);
  }

  // Define a function 'shipItem' that allows the Dealer to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipAutomobileItemToDealer(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    soldToDealer(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].originManufacturerID)
    {
    // Update the appropriate fields
    items[_upc].itemState = State.ShippedToDealer;
    // Emit the appropriate event
    emit ShippedToDealer(_upc);
  }

  // Define a function 'receiveItemByDealer' that allows the Dealer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItemByDealer(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    shippedToDealer(_upc)
    verifyCaller(items[_upc].originManufacturerID)
    {
    // Update the appropriate fields
    items[_upc].ownerID = items[_upc].dealerID;
    items[_upc].dealerID = items[_upc].dealerID;
    items[_upc].itemState = State.ReceivedByDealer;
    // Emit the appropriate event
    emit ReceivedByDealer(_upc);
  }

  // Define a function 'purchaseItemByCustomer' that allows the Customer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItemByCustomer(uint _upc, address customerID) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    receivedByDealer(_upc)
    paidEnough(items[_upc].productPrice)
    checkValue(_upc)
    {
    // Update the appropriate fields - ownerID, CustomerID, itemState
     items[_upc].ownerID = items[_upc].dealerID;
    items[_upc].customerID = customerID;
    items[_upc].itemState = State.PurchasedByCustomer;

    // Transfer money to Dealer
    items[_upc].customerID.transfer((items[_upc].productPrice * 3) /10);

    // Emit the appropriate event
    emit PurchasedByCustomer(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originManufacturerID,
  string originManufacturerName,
  string originManufacturerInformation,
  string originManufacturerLatitude,
  string originManufacturerLongitude
  ) 
  {
  // Assign values to the 8 parameters
     itemUPC = items[_upc].upc;
     itemSKU = items[_upc].sku;
     ownerID = items[_upc].ownerID;
     originManufacturerID = items[_upc].originManufacturerID;
     originManufacturerName = items[_upc].originManufacturerName;
     originManufacturerInformation = items[_upc].originManufacturerInformation;
     originManufacturerLatitude = items[_upc].originManufacturerLatitude;
     originManufacturerLongitude = items[_upc].originManufacturerLongitude;
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originManufacturerID,
  originManufacturerName,
  originManufacturerInformation,
  originManufacturerLatitude,
  originManufacturerLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  memory productNotes,
  uint    productPrice,
  State   itemState,
  address dealerID,
  address supplierID,
  address customerID
  ) 
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productPrice = items[_upc].productPrice;
    productNotes = items[_upc].productNotes;
    itemState = items[_upc].itemState;
    dealerID = items[_upc].dealerID;
    supplierID = items[_upc].supplierID;
    customerID = items[_upc].customerID; 
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  dealerID,
  supplierID,
  customerID
  );
  }
}
